package ui

import (
	"context"
	"fmt"
	"os/exec"
	"strings"
	"sync"

	"FastCVE/internal/database"
	"FastCVE/internal/packages"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

type CustomTheme struct {
	fyne.Theme
}

type UI struct {
	app      fyne.App
	win      fyne.Window
	cmd      *exec.Cmd
	cmdMutex sync.Mutex
	cancel   context.CancelFunc
}

func NewUI() *UI {
	a := app.NewWithID("com.example.fastcve")
	a.Settings().SetTheme(&CustomTheme{theme.DarkTheme()})
	w := a.NewWindow("CVE Notificator")
	w.Resize(fyne.NewSize(700, 700))

	return &UI{
		app: a,
		win: w,
	}
}

func (ui *UI) Run() error {
	pkgList, err := packages.GetInstalledPackages()
	if err != nil {
		return fmt.Errorf("error fetching packages: %w", err)
	}

	var selectedPackages []packages.Package

	checkboxContainer := container.NewVBox()

	filterPackages := func(filter string) {
		checkboxContainer.Objects = nil
		for _, pkg := range pkgList {
			if strings.Contains(strings.ToLower(pkg.Name), strings.ToLower(filter)) {
				currentPkg := pkg
				checkbox := widget.NewCheck(fmt.Sprintf("%s (%s)", currentPkg.Name, currentPkg.Version), func(checked bool) {
					if checked {
						selectedPackages = append(selectedPackages, currentPkg)
					} else {
						for j, spkg := range selectedPackages {
							if spkg.Name == currentPkg.Name && spkg.Version == currentPkg.Version {
								selectedPackages = append(selectedPackages[:j], selectedPackages[j+1:]...)
								break
							}
						}
					}
				})
				checkboxContainer.Add(checkbox)
			}
		}
		ui.win.Content().Refresh()
	}

	searchEntry := widget.NewEntry()
	searchEntry.SetPlaceHolder("Buscar paquete...")
	searchEntry.OnChanged = func(content string) {
		filterPackages(content)
	}

	scroll := container.NewScroll(checkboxContainer)
	scroll.SetMinSize(fyne.NewSize(500, 300))

	output := widget.NewMultiLineEntry()
	output.Wrapping = fyne.TextWrapWord
	output.Disable()
	output.TextStyle = fyne.TextStyle{Monospace: true}
	outputContainer := container.NewScroll(output)
	outputContainer.SetMinSize(fyne.NewSize(700, 200))

	saveButton := widget.NewButton("Guardar Selección", func() {
		go func() {
			db, err := database.InitDB()
			if err != nil {
				ui.logToOutput(output, fmt.Sprintf("Error inicializando la base de datos: %v\n", err))
				return
			}
			defer db.Close()

			for _, pkg := range selectedPackages {
				err := database.StorePackage(db, pkg.Name, pkg.Version)
				if err != nil {
					ui.logToOutput(output, fmt.Sprintf("Error almacenando los paquetes: %v\n", err))
				}
			}

			ui.logToOutput(output, "Paquetes almacenados!\n")
		}()
	})

	showButton := widget.NewButton("Ver Paquetes Guardados", func() {
		go func() {
			pkgList, err := database.RetrievePackagesFromDB()
			if err != nil {
				ui.logToOutput(output, fmt.Sprintf("No existen paquetes almacenados!\n"))
				return
			}

			for _, pkg := range pkgList {
				ui.logToOutput(output, fmt.Sprintf("%s (%s)\n", pkg.Name, pkg.Version))
			}
		}()
	})

	startButton := widget.NewButton("Comenzar Monitoreo", func() {
		go func() {
			ui.cmdMutex.Lock()
			defer ui.cmdMutex.Unlock()
			if ui.cmd != nil {
				ui.logToOutput(output, "El script de monitoreo ya está en ejecución.\n")
				return
			}
			ctx, cancel := context.WithCancel(context.Background())
			ui.cancel = cancel
			ui.cmd = exec.CommandContext(ctx, "python3", "user_notify.py")

			err := ui.cmd.Start()
			if err != nil {
				ui.logToOutput(output, fmt.Sprintf("Error al iniciar el script de monitoreo: %v\n", err))
				ui.cmd = nil
				ui.cancel = nil
				return
			}
			ui.logToOutput(output, "Monitoreo iniciado, las notificaciones se enviarán a su Telegram\n")
		}()
	})

	stopButton := widget.NewButton("Parar Monitoreo", func() {
		ui.cmdMutex.Lock()
		defer ui.cmdMutex.Unlock()
		if ui.cmd == nil {
			ui.logToOutput(output, "El script de monitoreo no está en ejecución.\n")
			return
		}
		ui.cancel()
		ui.cmd = nil
		ui.logToOutput(output, "Monitoreo detenido.\n")
	})

	clearDBButton := widget.NewButton("Limpiar Base de Datos", func() {
		go func() {
			db, err := database.InitDB()
			if err != nil {
				ui.logToOutput(output, fmt.Sprintf("Error inicializando la base de datos: %v\n", err))
				return
			}
			defer db.Close()

			err = database.ClearDatabase()
			if err != nil {
				ui.logToOutput(output, fmt.Sprintf("Error limpiando la base de datos: %v\n", err))
			} else {
				ui.logToOutput(output, "Base de datos limpiada.\n")
			}
		}()
	})

	buttonContainer := container.NewVBox(
		saveButton,
		showButton,
		startButton,
		stopButton,
		clearDBButton,
	)
	buttons := container.NewCenter(buttonContainer)

	ui.win.SetContent(container.NewBorder(
		container.NewVBox(searchEntry),
		outputContainer,
		nil,
		buttons,
		scroll,
	))

	filterPackages("")

	ui.win.ShowAndRun()
	return nil
}

func (ui *UI) logToOutput(output *widget.Entry, message string) {
	ui.win.Canvas().Refresh(output)
	output.SetText(output.Text + message)
}
