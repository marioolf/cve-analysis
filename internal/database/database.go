package database

import (
	"database/sql"

	_ "github.com/mattn/go-sqlite3"
)

type Package struct {
	Name    string
	Version string
}

func InitDB() (*sql.DB, error) {
	db, err := sql.Open("sqlite3", "./packages.db")
	if err != nil {
		return nil, err
	}

	_, err = db.Exec(`CREATE TABLE IF NOT EXISTS packages (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        version TEXT
    )`)
	if err != nil {
		db.Close()
		return nil, err
	}

	return db, nil
}

func StorePackage(db *sql.DB, name, version string) error {
	_, err := db.Exec("INSERT INTO packages (name, version) VALUES (?, ?)", name, version)
	return err
}

func RetrievePackagesFromDB() ([]Package, error) {
	db, err := sql.Open("sqlite3", "./packages.db")
	if err != nil {
		return nil, err
	}
	defer db.Close()

	rows, err := db.Query("SELECT name, version FROM packages")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var packages []Package
	for rows.Next() {
		var name, version string
		if err := rows.Scan(&name, &version); err != nil {
			return nil, err
		}
		packages = append(packages, Package{Name: name, Version: version})
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}

	return packages, nil
}

func ClearDatabase() error {
	db, err := InitDB()
	if err != nil {
		return err
	}
	defer db.Close()

	_, err = db.Exec("DELETE FROM packages")
	if err != nil {
		return err
	}

	return nil
}
