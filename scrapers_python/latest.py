import time
import json
import subprocess
from datetime import datetime, timedelta
import requests

from qualys_searcher import qualys_checker
from incibe import check_cve_in_incibe

def get_recent_cves():
    #A veces da forbidden 403
    #https://services.nvd.nist.gov/rest/json/cves/2.0?resultsPerPage=30&startIndex=0&pubStartDate=2024-07-29T10:14:08.630683Z&pubEndDate=2024-07-31T10:14:08.630694Z
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=2)

    url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    params = {
        "resultsPerPage": 30,
        "startIndex": 0,
        "pubStartDate": start_date.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
        "pubEndDate": end_date.strftime("%Y-%m-%dT%H:%M:%S.%fZ")
    }

    response = requests.get(url, params=params)
    data = response.json()

    return data.get('vulnerabilities', [])

def load_logged_cves(file_path):
    try:
        with open(file_path, 'r') as file:
            logged_cves = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        logged_cves = []
    return logged_cves

def save_cves(file_path, cves):
    with open(file_path, 'w') as file:
        json.dump(cves, file, indent=4)

def clean_description(description):
    cleaned_description = ' '.join(description.split())
    return cleaned_description

def append_to_log(file_path, cves):
    with open(file_path, 'a') as file:
        for cve in cves:
            cve_id = cve['cve']['id']
            description = cve['cve']['descriptions'][0]['value']
            cleaned_description = clean_description(description)
            score = cve['cve']['metrics']['cvssMetricV2'][0]['cvssData']['baseScore'] if 'cvssMetricV2' in cve['cve']['metrics'] else 'N/A'
            date = cve['cve']['published']
            file.write(f"Date: {date}\nCVE ID: {cve_id}\nDescription: {cleaned_description}\nScore: {score}\n")
            file.write(qualys_checker(cve_id))
            file.write(f"INCIBE: {check_cve_in_incibe(cve_id)}\n\n")

def mute_firefox():
    try:
        result = subprocess.run(['pactl', 'list', 'sink-inputs'], capture_output=True, text=True)
        lines = result.stdout.split('\n')
        for line in lines:
            if 'firefox' in line:
                sink_id = line.split()[1]
                subprocess.run(['pactl', 'set-sink-input-mute', sink_id, '1'])
    except Exception as e:
        print(f"Error silenciando Firefox: {e}")

def main():
    log_file_path = 'latest.log'
    logged_cves_file_path = 'logged_cves.json'

    while True:
        mute_firefox()  # silencia firefox para evitar sonidos del pipeline de qualys
        recent_cves = get_recent_cves()
        logged_cves = load_logged_cves(logged_cves_file_path)
        logged_cve_ids = {cve['cve']['id'] for cve in logged_cves}

        new_cves = [cve for cve in recent_cves if cve['cve']['id'] not in logged_cve_ids]

        if new_cves:
            print("Nuevos CVE a las: ", datetime.utcnow()+timedelta(hours=2))
            append_to_log(log_file_path, new_cves)
            logged_cves.extend(new_cves)
            save_cves(logged_cves_file_path, logged_cves)
        else:
            print("No ha habido nuevos CVE a las: ", datetime.utcnow()+timedelta(hours=2))
        time.sleep(300)

if __name__ == '__main__':
    main()
