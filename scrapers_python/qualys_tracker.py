import time
from datetime import datetime
from qualys_searcher import qualys_checker

def verificar_cves(cves):
    cambios = []
    for cve in cves:
        estado_actual = qualys_checker(cve)
        if "No se ha encontrado" not in estado_actual:
            cambios.append((cve, estado_actual))
    return cambios

def registrar_cambios(cambios, archivo_tracker, cves_procesados):
    with open(archivo_tracker, 'a') as file:
        for cve, nuevo_estado in cambios:
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            file.write(f"{timestamp}: CVE {cve} ha cambiado a estado: {nuevo_estado}\n")
            cves_procesados.add(cve)

def leer_cves_no_encontrados(archivo_log, cves_procesados):
    cves_no_encontrados = set()
    try:
        with open(archivo_log, 'r') as file:
            for linea in file:
                if "No se ha encontrado" in linea:
                    partes = linea.split(": Resultado de Qualys para ")
                    if len(partes) > 1:
                        cve_info = partes[1].strip().split(": No se ha encontrado")[0]
                        if cve_info not in cves_procesados:
                            cves_no_encontrados.add(cve_info)
        print(f"Encontrados {len(cves_no_encontrados)} CVEs en estado 'No se ha encontrado'")
    except Exception as e:
        print(f"Error al leer el archivo {archivo_log}: {e}")
    return cves_no_encontrados

def cargar_cves_procesados(archivo_tracker):
    cves_procesados = set()
    try:
        with open(archivo_tracker, 'r') as file:
            for linea in file:
                if "ha cambiado a estado" in linea:
                    partes = linea.split(": CVE ")
                    if len(partes) > 1:
                        cve_info = partes[1].split(" ha cambiado a estado")[0].strip()
                        cves_procesados.add(cve_info)
        print(f"Encontrados {len(cves_procesados)} CVEs procesados anteriormente")
    except Exception as e:
        print(f"Error al leer el archivo {archivo_tracker}: {e}")
    return cves_procesados

def qualys_tracker():
    archivo_log = 'qualys.log'
    archivo_tracker = 'qualys_tracker.log'
    
    cves_procesados = cargar_cves_procesados(archivo_tracker)
    
    while True:
        print("Recopilando CVEs no encontrados en Qualys...")
        cves_no_encontrados = leer_cves_no_encontrados(archivo_log, cves_procesados)
        
        if cves_no_encontrados:
            print("Verificando cambios en el pipeline...")
            cambios = verificar_cves(cves_no_encontrados)
            
            if cambios:
                print("Se han encontrado cambios! Guardando...")
                registrar_cambios(cambios, archivo_tracker, cves_procesados)
            else:
                print("No se encontraron cambios.")
        else:
            print("No se encontraron CVEs en estado 'No se ha encontrado'.")
        
        print("Esperando 30 minutos antes de la siguiente verificaci√≥n...")
        time.sleep(1800)

if __name__ == "__main__":
    qualys_tracker()
