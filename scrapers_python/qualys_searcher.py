import argparse
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import datetime

def save_notification(filepath, message):
    with open(filepath, 'a') as file:
        file.write(f'{datetime.datetime.now()}: {message}\n')

def qualys_checker(cve_to_search):
    options = Options()
    options.headless = True  # ejecutar en modo headless
    options.add_argument("--headless")


    #Para quitar el sonido
    #profile = webdriver.FirefoxProfile()
    #profile.set_preference("media.volume_scale", "0.0")

    driver = webdriver.Firefox(options=options)
    saveto = 'qualys.log'


    try:
        driver.get("https://www.qualys.com/vulnerability-detection-pipeline/")
        print("Página cargada.")

        # esperar hasta 5 segundos para que aparezca la ventana emergente de cookies
        time.sleep(5)

        try:
            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CLASS_NAME, 'q-cookie-consent__container')))
            cookie_container = driver.find_element(By.CLASS_NAME, 'q-cookie-consent__container')
            cookie_accept_button = cookie_container.find_element(By.ID, 'cookie-consent-give')
            cookie_accept_button.click()
            print("Cookies aceptadas.")
        except Exception as e:
            print("No se encontró la ventana emergente de cookies o ya ha sido aceptada.")

        # esperar 3 segundos después de aceptar las cookies
        time.sleep(3)

        search_box = WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.ID, 'q-filter-by-text')))

        driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center', inline: 'center'});", search_box)
        time.sleep(1)

        search_box.send_keys(cve_to_search)
        search_box.submit()
        print("Búsqueda de CVE enviada.")

        WebDriverWait(driver, 30).until(EC.presence_of_element_located((By.CSS_SELECTOR, '.vdpentries')))
        print("Resultados de búsqueda cargados.")

        results = driver.find_elements(By.CSS_SELECTOR, '.q-qid-in-progress__container')
        if not results:
            print(f"No se encontraron resultados para el CVE {cve_to_search}")
            save_notification(saveto, f'Resultado de Qualys para {cve_to_search}: No se ha encontrado\n')
            result = f'Resultado de Qualys para {cve_to_search}: No se ha encontrado\n'
            return result

        cve_entry = results[0]
        print("Entrada de CVE encontrada.")

        state_element = cve_entry.find_element(By.CSS_SELECTOR, 'div.q-qid-summary img')

        state_title = state_element.get_attribute('title')

        print(f"{cve_to_search}: {state_title}")
        save_notification(saveto, f'Resultado de Qualys para {cve_to_search}, figura como {state_title}\n')
        result = f'Resultado de Qualys para {cve_to_search}: {state_title}\n'
        return result

    except Exception as e:
        print(f"No se encontró la entrada para el CVE {cve_to_search}")
        save_notification(saveto, f'Resultado de Qualys para {cve_to_search}: No se ha encontrado\n')
        result = f'Resultado de Qualys para {cve_to_search}: No se ha encontrado\n'
        return result
    finally:
        driver.quit()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Search CVE status on Qualys website.")
    parser.add_argument('cve', type=str, help="CVE identifier to search for.")
    args = parser.parse_args()

    qualys_checker(args.cve)
