import requests
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

base_url = "https://cveawg.mitre.org/api/cve/"

init = 1000
end = 3000

cve_ids = [f"CVE-2024-{i}" for i in range(init, end + 1)]

def get_cve_details(cve_id):
    try:
        response = requests.get(base_url + cve_id)
        response.raise_for_status() 
        data = response.json()

        if 'cveMetadata' in data and 'containers' in data:
            date_reserved = data['cveMetadata'].get('dateReserved')
            date_published = data['cveMetadata'].get('datePublished')
            
            if date_reserved and date_published:
                date_reserved_dt = datetime.strptime(date_reserved, "%Y-%m-%dT%H:%M:%S.%fZ")
                date_published_dt = datetime.strptime(date_published, "%Y-%m-%dT%H:%M:%S.%fZ")
                days_difference = (date_published_dt - date_reserved_dt).days
                
                # verificaciones
                cna_data = data['containers'].get('cna', {})
                affected_data = cna_data.get('affected', [])
                if affected_data:
                    product_name = affected_data[0].get('product', 'Unknown')
                else:
                    product_name = 'Unknown'
                
                return {
                    "cve_id": cve_id,
                    "product": product_name,
                    "days_difference": days_difference
                }
    except requests.RequestException as e:
        print(f"Error al solicitar los datos para {cve_id}: {e}")
    except ValueError as e:
        print(f"Error al procesar los datos para {cve_id}: {e}")
    except KeyError as e:
        print(f"Error en los datos para {cve_id}: Campo faltante {e}")

    return None

cve_details_list = []
for cve_id in cve_ids:
    cve_details = get_cve_details(cve_id)
    if cve_details is not None:
        cve_details_list.append(cve_details)

df = pd.DataFrame(cve_details_list)

if not df.empty:
    average_days = df['days_difference'].mean()
else:
    average_days = 0

# almacena en archivo
with open('diferencia.log', 'w') as file:
    for index, row in df.iterrows():
        file.write(f"CVE ID: {row['cve_id']}, Producto: {row['product']}, Días de diferencia: {row['days_difference']}\n")
    
    file.write(f"\nLa media de días entre la asignación y la publicación de los CVE es: {average_days:.2f} días\n")

print("Los detalles y la media de días se han guardado en 'diferencia.log'")

sns.set(style="whitegrid")

# histograma
plt.figure(figsize=(12, 6))
sns.histplot(df['days_difference'], bins=20, kde=True)
plt.title('Distribución de la diferencia de días entre reserva y publicación')
plt.xlabel('Días de diferencia')
plt.ylabel('Frecuencia')
plt.savefig('dias_diferencia_histograma.png')
plt.close()

# gráfico de caja
plt.figure(figsize=(12, 6))
sns.boxplot(x=df['days_difference'])
plt.title('Diagrama de caja de la diferencia de días entre reserva y publicación')
plt.xlabel('Días de diferencia')
plt.savefig('dias_diferencia_boxplot.png')
plt.close()

print("Los gráficos se han guardado en 'dias_diferencia_histograma.png' y 'dias_diferencia_boxplot.png'")
