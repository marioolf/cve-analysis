import re
from datetime import datetime
import matplotlib.pyplot as plt

def read_latest_log(filename):
    latest_data = {}
    with open(filename, 'r') as file:
        content = file.read()
        entries = content.split('\n\n')
        for entry in entries:
            if entry.strip():
                date_match = re.search(r"Date: (.+)", entry)
                cve_match = re.search(r"CVE ID: (.+)", entry)
                if date_match and cve_match:
                    date = datetime.fromisoformat(date_match.group(1))
                    cve = cve_match.group(1)
                    latest_data[cve] = date
    return latest_data

def read_qualys_tracker(filename):
    qualys_data = {}
    cve_status = {}
    with open(filename, 'r') as file:
        for line in file:
            if "CVE" in line and "ha cambiado a estado" in line:
                date_match = re.search(r"^(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})", line)
                cve_match = re.search(r"CVE (CVE-\d{4}-\d+)", line)
                status_match = re.search(r"Resultado de Qualys para \S+: (.+)", line)
                if date_match and cve_match and status_match:
                    date = datetime.strptime(date_match.group(1), '%Y-%m-%d %H:%M:%S')
                    cve = cve_match.group(1)
                    status = status_match.group(1)
                    qualys_data[cve] = date
                    cve_status[cve] = status
    return qualys_data, cve_status

def calculate_time_differences(latest_data, qualys_data):
    time_differences = []
    for cve, qualys_date in qualys_data.items():
        if cve in latest_data:
            latest_date = latest_data[cve]
            difference = (qualys_date - latest_date).total_seconds() / (3600 * 24)
            time_differences.append(difference)
    return time_differences

def plot_time_differences(time_differences, average_time_difference, output_filename):
    plt.figure(figsize=(10, 5))
    plt.hist(time_differences, bins=20, edgecolor='black', alpha=0.7)
    plt.axvline(average_time_difference, color='r', linestyle='dashed', linewidth=1)
    plt.title('Distribución del tiempo que tarda un CVE en añadirse a Qualys Pipeline')
    plt.xlabel('Diferencia de tiempo (días)')
    plt.ylabel('Frecuencia')
    plt.grid(True)
    plt.savefig(output_filename)
    plt.close()

def plot_cve_status(cve_status, output_filename):
    status_counts = {}
    for status in cve_status.values():
        if status in status_counts:
            status_counts[status] += 1
        else:
            status_counts[status] = 1
    
    total = sum(status_counts.values())
    statuses = list(status_counts.keys())
    counts = [count / total * 100 for count in status_counts.values()]

    plt.figure(figsize=(10, 5))
    plt.bar(statuses, counts, color='skyblue', edgecolor='black')
    plt.title('Distribución de los estados de los CVE en Qualys Tracker')
    plt.xlabel('Estado')
    plt.ylabel('Porcentaje de CVEs (%)')
    plt.grid(axis='y')
    plt.savefig(output_filename)
    plt.close()

latest_data = read_latest_log('../../scrapers_python/latest.log')
qualys_data, cve_status = read_qualys_tracker('../../scrapers_python/qualys_tracker.log')
time_differences = calculate_time_differences(latest_data, qualys_data)
average_time_difference = sum(time_differences) / len(time_differences) if time_differences else 0

print(f"Tiempo promedio de diferencia: {average_time_difference} días")
plot_time_differences(time_differences, average_time_difference, 'time_differences.png')
plot_cve_status(cve_status, 'cve_status.png')
